/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.6.1 Thu Jan 24 16:45:28 2019.
 */

#ifndef ENUMS_H
#define ENUMS_H

#include <stdint.h>
#include <stdbool.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#define ENUMS_VEHICLE_STATUS_FRAME_ID (0x00u)

typedef enum {
    OFF = 0,
    NOMINAL = 1,
    OVERHEAT = 2
} enums_inverter_state;

typedef enum {
    OK = 0,
    FAULTED = 1
} enums_wheel_speed_sensor_state;

/**
 * Signals in message VehicleStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct enums_vehicle_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    enums_inverter_state inverter_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    enums_wheel_speed_sensor_state wheel_speed_sensor_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t signed_int_char;
};

/**
 * Pack message VehicleStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int enums_vehicle_status_pack(
    uint8_t *dst_p,
    const struct enums_vehicle_status_t *src_p,
    size_t size);

/**
 * Unpack message VehicleStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int enums_vehicle_status_unpack(
    struct enums_vehicle_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t enums_vehicle_status_inverter_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double enums_vehicle_status_inverter_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool enums_vehicle_status_inverter_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t enums_vehicle_status_wheel_speed_sensor_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double enums_vehicle_status_wheel_speed_sensor_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool enums_vehicle_status_wheel_speed_sensor_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t enums_vehicle_status_signed_int_char_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double enums_vehicle_status_signed_int_char_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool enums_vehicle_status_signed_int_char_is_in_range(uint8_t value);

#endif
